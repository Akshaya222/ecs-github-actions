name: Stale Pull Request

on:
  workflow_dispatch:
  
jobs:
  stale-pr-reminder:
    runs-on: ubuntu-latest

    steps:
     - name: Generate token
       id: generate_token
       uses: tibdex/github-app-token@v1.8.0
       with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
          
     - name: Checkout code
       uses: actions/checkout@v2
       with:
         token: ${{ steps.generate_token.outputs.token }}
         
     - name: Bash Script
       run: |
         GITHUB_OWNER="Akshaya222"
         GITHUB_REPO="ecs-github-actions"
         ACCESS_TOKEN=${{ steps.generate_token.outputs.token }}
      
         # # to fetch open pull requests
         # PR_LIST=$(curl -s -H "Authorization: token $ACCESS_TOKEN" "https://api.github.com/repos/$GITHUB_OWNER/$GITHUB_REPO/pulls?state=open&direction=asc")
         # echo "pr list is ${PR_LIST}"

         API_URL="https://api.github.com/repos/Akshaya222/ecs-github-actions/pulls/8/commits"

         # Make the API request using curl
         API_RESPONSE=$(curl -s -H "Authorization: token $ACCESS_TOKEN" "$API_URL")
         SORTED_COMMITS=$(echo "$API_RESPONSE" | jq -c 'sort_by(.commit.author.date) | reverse')
         LATEST_COMMIT_MESSAGE=$(echo "$SORTED_COMMITS" | jq -r '.[0].commit.message')

          # Extract the timestamp from the latest commit
         

          # Print the timestamp
         echo "Timestamp of the latest commit in Pull Request $LATEST_COMMIT_MESSAGE"

         # to filter pull requests which had code push 2, 4 and 6 minutes ago
         # PR_LIST_2_MINUTES=$(echo "$PR_LIST" | jq -r ".[] | select(.head.repo.pushed_at | startswith(\"$(date -u -d '2 minutes ago' +%Y-%m-%dT%H:%M)\")) | .number")
         # PR_LIST_4_MINUTES=$(echo "$PR_LIST" | jq -r ".[] | select(.head.repo.pushed_at | startswith(\"$(date -u -d '4 minutes ago' +%Y-%m-%dT%H:%M)\")) | .number")
         # PR_LIST_6_MINUTES=$(echo "$PR_LIST" | jq -r ".[] | select(.head.repo.pushed_at | startswith(\"$(date -u -d '6 minutes ago' +%Y-%m-%dT%H:%M)\")) | .number")

         # # Loop through the list of pull requests and add comments or close them
         # for PR_NUMBER in $PR_LIST_2_MINUTES; do
         #  COMMENT="**Reminder**: This pull request (#$PR_NUMBER) will be closed in 4 minutes if there's no further activity. Please review and provide any necessary updates."
         #  curl -s -H "Authorization: token $ACCESS_TOKEN" -X POST -d '{"body":"'"$COMMENT"'"}' "https://api.github.com/repos/$GITHUB_OWNER/$GITHUB_REPO/issues/$PR_NUMBER/comments"
         # done

         # for PR_NUMBER in $PR_LIST_4_MINUTES; do
         #   COMMENT="**Reminder**: This pull request (#$PR_NUMBER) will be closed in 2 minutes if there's no further activity. Please review and provide any necessary updates."
         #   curl -s -H "Authorization: token $ACCESS_TOKEN" -X POST -d '{"body":"'"$COMMENT"'"}' "https://api.github.com/repos/$GITHUB_OWNER/$GITHUB_REPO/issues/$PR_NUMBER/comments"
         # done

         # for PR_NUMBER  in $PR_LIST_6_MINUTES; do
         #   COMMENT="**Closing**: Closing this pull request (#$PR_NUMBER) as it was inactive for more than 6 minutes. Feel free to reopen if needed."
         #   curl -s -H "Authorization: token $ACCESS_TOKEN" -X POST -d '{"body":"'"$COMMENT"'"}' "https://api.github.com/repos/$GITHUB_OWNER/$GITHUB_REPO/issues/$PR_NUMBER/comments"
         #   curl -s -H "Authorization: token $ACCESS_TOKEN" -X PATCH -d '{"state": "closed"}' "https://api.github.com/repos/$GITHUB_OWNER/$GITHUB_REPO/pulls/$PR_NUMBER"
         # done

